---
import { getCollection, type CollectionEntry } from 'astro:content';
import TutorialLayout from '../../layouts/TutorialLayout.astro';
import { findRelated } from '../../utils/relatedContent';

// Define the structure for related items returned by the utility
interface RelatedItem {
  slug: string;
  title: string;
  collection: string;
}

// Generate pages for all tutorials
export async function getStaticPaths() {
  const allTutorials = await getCollection('tutorials');
  const allPosts = await getCollection('posts'); // Fetch posts

  // Combine all content that has tags and can be related
  const allTaggableContent = [...allTutorials, ...allPosts];

  // Sort tutorials by date for next/prev logic (only needed for tutorials on this page)
  const sortedTutorials = [...allTutorials].sort((a, b) => a.data.publishDate.valueOf() - b.data.publishDate.valueOf());

  return allTutorials.map((entry) => {
    // Find the index in the *sorted tutorials* array for correct next/prev
    const sortedIndex = sortedTutorials.findIndex(t => t.slug === entry.slug);
    const prev = sortedIndex > 0 ? { slug: sortedTutorials[sortedIndex - 1].slug, title: sortedTutorials[sortedIndex - 1].data.title } : null;
    const next = sortedIndex < sortedTutorials.length - 1 ? { slug: sortedTutorials[sortedIndex + 1].slug, title: sortedTutorials[sortedIndex + 1].data.title } : null;

    // Find related content using the combined list
    const relatedPosts = findRelated({ 
      currentItem: entry, 
      allItems: allTaggableContent, // Pass the combined list
      limit: 5 
    });

    return {
      params: { slug: entry.slug }, 
      props: { 
        entry, 
        prev, 
        next, 
        relatedPosts // Pass related items (mixed types possible)
      },
    };
  });
}

interface Props {
  entry: CollectionEntry<'tutorials'>;
  prev: { slug: string; title: string } | null;
  next: { slug: string; title: string } | null;
  relatedPosts: RelatedItem[]; // Use the updated interface
}

const { entry, prev, next, relatedPosts } = Astro.props;
const { Content } = await entry.render();
---
<TutorialLayout 
  entry={entry} 
  prev={prev} 
  next={next} 
  relatedPosts={relatedPosts} // Pass related items (mixed types possible)
>
	<Content />
</TutorialLayout> 