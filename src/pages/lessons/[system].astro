---
import Layout from "../../layouts/BaseLayout.astro";
import { getCollection, getEntry } from "astro:content";

const { params } = Astro;
const systemSlug = params.system;

const systemEntry = await getEntry("systems", systemSlug);
const systemName = systemEntry?.data.name ?? systemSlug;

const allLessons = await getCollection("lessons");

// Filter lessons for the current system
const lessons = allLessons
  .filter((lesson: any) => lesson.data.system === systemSlug)
  .sort((a: any, b: any) => a.data.order - b.data.order);

// Group lessons by tier (as string keys for type safety)
const lessonsByTier: Record<string, any[]> = lessons.reduce((acc: Record<string, any[]>, lesson: any) => {
  const tier = String(lesson.data.tier || 1);
  if (!acc[tier]) acc[tier] = [];
  acc[tier].push(lesson);
  return acc;
}, {});

export async function getStaticPaths() {
  const { getCollection } = await import("astro:content");
  const lessons = await getCollection("lessons");

  const uniqueSystems = Array.from(new Set(lessons.map((l: any) => l.data.system)));

  return uniqueSystems.map((slug) => ({ params: { system: slug } }));
}
---

<Layout title={`Lessons for ${systemName}`}>
  {
    Object.entries(lessonsByTier).map(([tier, tierLessons]) => (
      <section>
        <h2>Tier {tier}</h2>
        <ul>
          {(tierLessons as any[]).map((lesson) => (
            <li>
              <a href={`/lessons/${systemSlug}/tier-${tier}/${lesson.slug}`}>
                {lesson.data.title}
              </a>
            </li>
          ))}
        </ul>
      </section>
    ))
  }
</Layout>
