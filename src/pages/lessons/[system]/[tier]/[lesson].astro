---
import { getCollection, getEntry, render } from 'astro:content';
import Layout from '../../../../layouts/Layout.astro';

const { params } = Astro;
const systemSlug = params.system;
const tierSlug = params.tier;
const lessonSlug = params.lesson;

// Fetch the specific system's data
const systems = await getCollection('systems');
const systemData = systems.find(s => s.slug === systemSlug);

// Fetch the specific tier's data
const tiers = await getCollection('tiers');
const tierData = tiers.find(t => t.data.system === systemSlug && t.data.tier === tierSlug);

const slug = `${systemSlug}/${tierSlug}/${lessonSlug}`;

const lesson = await getEntry("lessons", slug);
if (!lesson) {
    throw new Error(`Lesson not found: ${slug}`);
}
const { Content } = await render(lesson);

export async function getStaticPaths() {
  const lessons = await getCollection('lessons');

  return lessons.map((lesson) => {
    const { system, tier } = lesson.data;
    return {
      params: {
        system,
        tier,
        lesson: lesson.slug.split('/').pop(), // get the filename
      },
      props: {
        lesson,
      },
    };
  });
}

// Define the breadcrumb items
const breadcrumbItems = [
  { label: 'Home', href: '/' },
  { label: 'Lessons', href: '/lessons' },
  { label: systemData?.data.name || 'Unknown System', href: `/lessons/${systemSlug}` },
  { label: tierData?.data.title || 'Unknown Tier', href: `/lessons/${systemSlug}/${tierSlug}` },
  { label: lesson.data.title || 'Unknown Lesson', href: `/lessons/${systemSlug}/${tierSlug}/${lessonSlug}` },
];
---

<Layout title={`${systemData?.data.name || 'Unknown System'} - Tier ${tierData?.data.order}: ${lesson.data.title || 'Unknown Lesson'}`} breadcrumbItems={breadcrumbItems}>
    <Content />
</Layout>