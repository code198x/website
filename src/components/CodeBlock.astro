---
// Placeholder for a custom code block component
// Could add features like copy button, language display, line numbers etc.
interface Props {
  code: string;
  lang?: string;
  title?: string;
}

const { code, lang = 'text', title } = Astro.props;
---
<div class="code-block-wrapper">
  {title && <div class="code-title">{title}</div>}
  <button class="copy-button" title="Copy to clipboard">Copy</button>
  <pre class=`language-${lang}`><code class=`language-${lang}`>{code}</code></pre>
</div>

<style>
  .code-block-wrapper {
    position: relative;
    margin: 1.5em 0;
    /* Basic styling, can be enhanced */
  }
  .code-title {
    font-size: 0.9em;
    font-style: italic;
    color: #aaa;
    margin-bottom: 0.25em;
  }
  pre {
    padding: 1em;
    padding-top: 2.5em; /* Make space for button */
    background-color: #282c34; /* Example theme color */
    border-radius: 4px;
    overflow-x: auto;
  }
  .copy-button {
    position: absolute;
    top: 0.5em;
    right: 0.5em;
    background-color: #555;
    color: #eee;
    border: none;
    padding: 0.3em 0.6em;
    border-radius: 3px;
    cursor: pointer;
    font-size: 0.8em;
    opacity: 0.7;
    transition: opacity 0.2s ease-in-out, background-color 0.2s ease-in-out;
  }
  .copy-button:hover {
    opacity: 1;
    background-color: #666;
  }
   .copy-button.copied {
    background-color: #4CAF50; /* Green background for success */
    color: white;
    opacity: 1;
  }
</style>

<script>
  document.querySelectorAll('.copy-button').forEach(button => {
    button.addEventListener('click', async (event) => {
      const wrapper = (event.target as HTMLElement).closest('.code-block-wrapper');
      if (!wrapper) return;

      const codeElement = wrapper.querySelector('code');
      if (!codeElement) return;

      const textToCopy = codeElement.textContent || '';

      try {
        await navigator.clipboard.writeText(textToCopy);
        button.textContent = 'Copied!';
        button.classList.add('copied');

        // Reset button text after a short delay
        setTimeout(() => {
          button.textContent = 'Copy';
          button.classList.remove('copied');
        }, 2000); 
      } catch (err) {
        console.error('Failed to copy text: ', err);
        button.textContent = 'Error';
         // Optionally reset after delay
        setTimeout(() => {
          button.textContent = 'Copy';
        }, 2000);
      }
    });
  });
</script> 