---
// AlphabeticalList.astro
interface Props {
  title: string;
  groupedItems: Record<string, any[]>;
  baseUrl: string;
}

const { title, groupedItems, baseUrl } = Astro.props;

// Generate the alphabet with '#' for numeric entries
const alphabet = ['#', ...Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i))];
---

<section>
  <nav class="alphabetical-list">
    {alphabet.map(letter => (
      <a href={`#${title.toLowerCase()}-${letter}`} class={groupedItems[letter] ? '' : 'disabled'}>{letter}</a>
    ))}
  </nav>
  {Object.entries(groupedItems).sort().map(([letter, items]) => (
    <div class="alphabetical-group" id={`${title.toLowerCase()}-${letter}`}>
      <h2>{letter}</h2>
      <ul>
        {items.map(item => (
          <li id={item.slug}>
            <a href={`${baseUrl}/${item.slug}`}>{item.data.name}</a>
          </li>
        ))}
      </ul>
    </div>
  ))}
</section>

<style>
  .disabled {
    pointer-events: none;
    color: gray;
  }
  .alphabetical-list {
    display: flex;
    flex-wrap: nowrap;
    gap: 0.2rem;
    justify-content: center;
    margin-bottom: 3rem;
  }
  .alphabetical-list a {
    padding: 0.25rem 0.5rem;
    border: 1px solid #ccc;
    border-radius: 0.25rem;
    text-decoration: none;
    color: #000;
  }
  .alphabetical-list a:hover {
    background-color: #f0f0f0;
  }
  .alphabetical-list a.disabled {
    pointer-events: none;
    color: #f0f0f0;
    background-color: gray;
  }
  .alphabetical-group {
    margin-top: 1rem;
  }
  .alphabetical-group h2 {
    margin-bottom: 0.5rem;
    text-align: center;
  }
  .alphabetical-group ul {
    margin-left: 1rem;
  }
  .alphabetical-group ul li {
    margin-bottom: 0.5rem;
  }
</style>
